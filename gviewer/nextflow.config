// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'


manifest {
	name = 'OMICS-CATALOG'
	author = 'IFREMER-SeBiMER'
	homePage = 'https://gitlab.ifremer.fr/bioinfo/genomebrowser'
	mainScript = 'main.nf'
	nextflowVersion = '>=20.10.0'
	version = 'beta'
} 

//Execution profiles

profiles {
	custom {
		includeConfig 'conf/custom.config'
        	includeConfig 'conf/reports.config'
       		// Workdir for temporary data
        	workDir = "$params.logdir"
	}

	singularity {
		docker.enabled = false
		singularity.autoMounts = true
		singularity.enabled = true
		process {
			withLabel : jbrowse2 {
                	   container = "${baseDir}/containers/jbrowse2-1.0.2.sif"
			}
			withLabel : fasta {
                	   container = "${baseDir}/containers/samtools-1.12.sif"
            		}
            		withLabel : bam {
                	   container = "${baseDir}/containers/samtools-1.12.sif"
            		}
          		withLabel : vcf {
                	   container = "${baseDir}/containers/bcftools-1.12.sif"
           		}	
            		withLabel : gff {
                	   container = "${baseDir}/containers/genometools-1.6.1.sif"
            		}
            		withLabel : gff3 {
                	   container = "${baseDir}/containers/genometools-1.6.1.sif"
            		}

		}
    	}
}
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


