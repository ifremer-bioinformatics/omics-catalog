/*
 * -------------------------------------------------
 *  Nextflow config file for processes resources
 * -------------------------------------------------
 * Defines resources for all OMICS-CATALOG processes
 */


//define max for resources (expected to be overwritten)
params {
    max_cpus = 28
    max_memory = 115.GB
    max_time = 48.h
}

process {
	// Capture exit codes from upstream processes when piping
    	shell = ['/usr/bin/env bash', '-euo', 'pipefail']

    	// default for all tasks
    	cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    	memory = { check_max( 5.GB * task.attempt, 'memory' ) }
   	time = { check_max( 10.m * task.attempt, 'time' ) }
    	errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    	maxRetries = 3
    	maxErrors = '-1'

	withLabel : get_singularity_images {
        	time = { check_max( 1.h * task.attempt, 'time' ) }
	}

	withLabel : fasta {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
	}

	withLabel : bam {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
	}

	withLabel : vcf {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
	}

	withLabel : gff {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
	}

	withLabel : gff3 {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
	}

	withLabel : jbrowse2 {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
	}
 
	withLabel : url {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 1.GB * task.attempt, 'memory' ) }
	} 

	withLabel : parse_json {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 1.GB * task.attempt, 'memory' ) }
	} 
}

